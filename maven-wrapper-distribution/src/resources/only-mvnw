#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version @@project.version@@
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

# JDK management functions
detect_platform() {
  case "$(uname)" in
  Darwin*) echo "macos" ;;
  CYGWIN* | MINGW*) echo "windows" ;;
  *) echo "linux" ;;
  esac
}

detect_architecture() {
  case "$(uname -m)" in
  x86_64 | amd64) echo "x64" ;;
  aarch64 | arm64) echo "aarch64" ;;
  i386 | i686) echo "x86" ;;
  *) echo "x64" ;;  # default fallback
  esac
}

resolve_jdk_url() {
  local version="$1"
  local vendor="${2:-temurin}"

  # Detect SDKMAN platform
  local platform="$(detect_sdkman_platform)"

  if [ "$platform" = "exotic" ]; then
    die "Unsupported platform for JDK download. Please use a direct JDK URL instead."
  fi

  # Normalize vendor and get SDKMAN version
  local sdkman_version="$(get_sdkman_version "$version" "$vendor")"

  # Use SDKMAN API to get download URL
  local sdkman_api_url="https://api.sdkman.io/2/broker/download/java/${sdkman_version}/${platform}"

  verbose "Resolving JDK download URL from SDKMAN API: $sdkman_api_url"

  # Make HTTP request to SDKMAN API (handle 302 redirect)
  local download_url
  if command -v curl >/dev/null; then
    # Get the redirect location from SDKMAN API
    download_url="$(curl -s -I "$sdkman_api_url" 2>/dev/null | grep -i '^location:' | cut -d' ' -f2- | tr -d '\r\n')"
  elif command -v wget >/dev/null; then
    # wget can also handle redirects, but we need to extract the location
    download_url="$(wget -q -S -O /dev/null "$sdkman_api_url" 2>&1 | grep -i '^  location:' | cut -d' ' -f4- | tr -d '\r\n')"
  else
    die "Cannot resolve JDK URL: curl or wget required"
  fi

  if [ -z "$download_url" ]; then
    die "Failed to resolve JDK download URL for $sdkman_version on $platform"
  fi

  echo "$download_url"
}

detect_sdkman_platform() {
  local kernel="$(uname -s)"
  local machine="$(uname -m)"

  case "$kernel" in
  Linux)
    case "$machine" in
    i686) echo "linuxx32" ;;
    x86_64) echo "linuxx64" ;;
    armv6l|armv7l|armv8l) echo "linuxarm32hf" ;;
    aarch64) echo "linuxarm64" ;;
    *) echo "exotic" ;;
    esac
    ;;
  Darwin)
    case "$machine" in
    x86_64) echo "darwinx64" ;;
    arm64) echo "darwinarm64" ;;
    *) echo "darwinx64" ;;
    esac
    ;;
  CYGWIN*|MINGW*|MSYS*)
    case "$machine" in
    x86_64) echo "windowsx64" ;;
    *) echo "exotic" ;;
    esac
    ;;
  *)
    echo "exotic"
    ;;
  esac
}

get_sdkman_version() {
  local version="$1"
  local vendor="$2"

  # Normalize vendor to SDKMAN suffix
  local suffix
  case "$vendor" in
  temurin|adoptium|adoptopenjdk|eclipse) suffix="-tem" ;;
  corretto|amazon|aws) suffix="-amzn" ;;
  zulu|azul) suffix="-zulu" ;;
  liberica|bellsoft) suffix="-librca" ;;
  oracle) suffix="-oracle" ;;
  microsoft|ms) suffix="-ms" ;;
  semeru|ibm) suffix="-sem" ;;
  graalvm|graal) suffix="-grl" ;;
  *) suffix="-tem" ;;  # Default to Temurin
  esac

  # Handle major version resolution by querying SDKMAN API
  if echo "$version" | grep -q '^[0-9]\+$'; then
    # This is a major version, get the latest from SDKMAN
    local latest_version
    latest_version="$(get_latest_version_from_sdkman "$version" "$suffix")"
    if [ -n "$latest_version" ]; then
      version="$latest_version"
    else
      die "Failed to resolve JDK version $version from SDKMAN API. Please check your internet connection or specify an exact JDK version with jdkDistributionUrl."
    fi
  fi

  echo "${version}${suffix}"
}

get_latest_version_from_sdkman() {
  local major_version="$1"
  local vendor_suffix="$2"
  local platform="$(detect_sdkman_platform)"

  if [ "$platform" = "exotic" ]; then
    verbose "Unsupported platform for JDK resolution: $platform"
    return 1  # Cannot query SDKMAN for exotic platforms
  fi

  # Simple caching: check if we have a cached version from today
  local cache_file="${MAVEN_USER_HOME}/wrapper/cache/jdk-${major_version}${vendor_suffix}.cache"
  local cache_dir="$(dirname "$cache_file")"

  # Check cache if it exists and is less than 24 hours old
  if [ -f "$cache_file" ]; then
    local cache_age
    if command -v stat >/dev/null; then
      # Linux/macOS stat command
      if stat -c %Y "$cache_file" >/dev/null 2>&1; then
        cache_age="$(stat -c %Y "$cache_file")"
      elif stat -f %m "$cache_file" >/dev/null 2>&1; then
        cache_age="$(stat -f %m "$cache_file")"
      fi
    fi

    if [ -n "$cache_age" ]; then
      local current_time="$(date +%s)"
      local age_hours=$(( (current_time - cache_age) / 3600 ))

      if [ "$age_hours" -lt 24 ]; then
        local cached_version
        cached_version="$(cat "$cache_file" 2>/dev/null)"
        if [ -n "$cached_version" ]; then
          verbose "Using cached JDK version: ${major_version} -> ${cached_version}"
          echo "$cached_version"
          return 0
        fi
      fi
    fi
  fi

  # Query SDKMAN API for all available versions
  local versions_api_url="https://api.sdkman.io/2/candidates/java/${platform}/versions/all"
  local all_versions

  verbose "Querying SDKMAN API for JDK versions: $versions_api_url"

  if command -v curl >/dev/null; then
    all_versions="$(curl -s -f "$versions_api_url" 2>/dev/null)"
  elif command -v wget >/dev/null; then
    all_versions="$(wget -q -O - "$versions_api_url" 2>/dev/null)"
  else
    verbose "No HTTP client (curl/wget) available for SDKMAN API"
    return 1  # No HTTP client available
  fi

  if [ -z "$all_versions" ]; then
    verbose "SDKMAN API returned empty response"
    return 1  # API call failed
  fi

  # Find the latest version for the major version and vendor
  # SDKMAN returns versions in a comma-separated list
  local latest_version
  latest_version="$(echo "$all_versions" | tr ',' '\n' | grep "^${major_version}\." | grep -- "${vendor_suffix}\$" | head -1 | sed "s/${vendor_suffix}\$//")"

  if [ -n "$latest_version" ]; then
    # Cache the result
    mkdir -p "$cache_dir"
    echo "$latest_version" > "$cache_file" 2>/dev/null || true
    verbose "Resolved JDK version from SDKMAN: ${major_version} -> ${latest_version}"
    echo "$latest_version"
    return 0
  else
    verbose "No matching JDK version found for ${major_version} with vendor suffix ${vendor_suffix}"
    return 1  # No matching version found
  fi
}

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
# also parse JDK-related properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  jdkVersion) jdkVersion=$(trim "${value-}") ;;
  jdkVendor) jdkVendor=$(trim "${value-}") ;;
  jdkDistributionUrl) jdkDistributionUrl=$(trim "${value-}") ;;
  jdkSha256Sum) jdkSha256Sum=$(trim "${value-}") ;;
  alwaysDownloadJdk) alwaysDownloadJdk=$(trim "${value-}") ;;
  toolchainJdkVersion) toolchainJdkVersion=$(trim "${value-}") ;;
  toolchainJdkVendor) toolchainJdkVendor=$(trim "${value-}") ;;
  toolchainJdkDistributionUrl) toolchainJdkDistributionUrl=$(trim "${value-}") ;;
  toolchainJdkSha256Sum) toolchainJdkSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

# JDK management
install_jdk() {
  local version="$1"
  local vendor="${2:-temurin}"
  local url="$3"
  local checksum="$4"
  local always_download="${5:-false}"

  if [ -z "$version" ]; then
    return 0  # No JDK version specified
  fi

  # Determine JDK installation directory
  local jdk_dir_name="jdk-${version}-${vendor}"
  local jdk_home="${MAVEN_USER_HOME}/wrapper/jdks/${jdk_dir_name}"

  # Check if JDK already exists and we're not forcing re-download
  if [ -d "$jdk_home" ] && [ "$always_download" != "true" ]; then
    verbose "JDK $version already installed at $jdk_home"
    export JAVA_HOME="$jdk_home"
    return 0
  fi

  # Resolve JDK URL if not provided
  if [ -z "$url" ]; then
    url="$(resolve_jdk_url "$version" "$vendor")"
  fi

  verbose "Installing JDK $version from $url"

  # Create JDK directory
  mkdir -p "${jdk_home%/*}"

  # Prepare temp dir for JDK download
  local jdk_tmp_dir
  if jdk_tmp_dir="$(mktemp -d)" && [ -d "$jdk_tmp_dir" ]; then
    local jdk_clean() { rm -rf -- "$jdk_tmp_dir"; }
    trap jdk_clean HUP INT TERM EXIT
  else
    die "cannot create temp dir for JDK"
  fi

  # Download JDK
  local jdk_filename="${url##*/}"
  local jdk_file="$jdk_tmp_dir/$jdk_filename"

  verbose "Downloading JDK to: $jdk_file"

  # Download using available tools
  if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
    wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$url" -O "$jdk_file" || die "wget: Failed to fetch JDK from $url"
  elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
    curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$jdk_file" "$url" || die "curl: Failed to fetch JDK from $url"
  else
    die "Cannot download JDK: wget or curl required"
  fi

  # Verify checksum if provided
  if [ -n "$checksum" ]; then
    verbose "Verifying JDK checksum"
    local checksum_result=false
    if command -v sha256sum >/dev/null; then
      if echo "$checksum  $jdk_file" | sha256sum -c - >/dev/null 2>&1; then
        checksum_result=true
      fi
    elif command -v shasum >/dev/null; then
      if echo "$checksum  $jdk_file" | shasum -a 256 -c >/dev/null 2>&1; then
        checksum_result=true
      fi
    else
      echo "Warning: Checksum validation requested but neither 'sha256sum' or 'shasum' are available." >&2
    fi
    if [ "$checksum_result" = false ]; then
      die "Error: Failed to validate JDK SHA-256 checksum"
    fi
  fi

  # Extract JDK
  verbose "Extracting JDK to: $jdk_home"
  mkdir -p "$jdk_home"

  case "$jdk_filename" in
  *.tar.gz | *.tgz)
    tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$jdk_file" -C "$jdk_home" --strip-components=1 || die "failed to extract JDK tar.gz"
    ;;
  *.zip)
    if command -v unzip >/dev/null; then
      # Extract and find the JDK directory
      unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$jdk_file" -d "$jdk_tmp_dir" || die "failed to extract JDK zip"
      # Find the JDK directory and move its contents
      local jdk_extracted_dir
      jdk_extracted_dir="$(find "$jdk_tmp_dir" -maxdepth 1 -type d -name "*jdk*" | head -1)"
      if [ -n "$jdk_extracted_dir" ] && [ -d "$jdk_extracted_dir" ]; then
        mv "$jdk_extracted_dir"/* "$jdk_home"/ || die "failed to move JDK contents"
      else
        die "Could not find JDK directory in extracted zip"
      fi
    else
      die "Cannot extract JDK zip: unzip command not available"
    fi
    ;;
  *)
    die "Unsupported JDK archive format: $jdk_filename"
    ;;
  esac

  # Verify JDK installation
  if [ ! -f "$jdk_home/bin/java" ]; then
    die "JDK installation failed: java executable not found at $jdk_home/bin/java"
  fi

  verbose "JDK $version installed successfully at $jdk_home"
  export JAVA_HOME="$jdk_home"

  jdk_clean || :
}

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

# Install JDK if configured
install_jdk "$jdkVersion" "$jdkVendor" "$jdkDistributionUrl" "$jdkSha256Sum" "$alwaysDownloadJdk"

# Install toolchain JDK if configured (basic support - just download, no toolchains.xml update in script mode)
if [ -n "$toolchainJdkVersion" ]; then
  verbose "Installing toolchain JDK $toolchainJdkVersion"
  install_jdk "$toolchainJdkVersion" "$toolchainJdkVendor" "$toolchainJdkDistributionUrl" "$toolchainJdkSha256Sum" "$alwaysDownloadJdk"
fi

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c - >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
